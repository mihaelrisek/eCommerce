

<aside class="filter_wrapper">


  <form data-filter-url-reset="<%=currentPath%>" id="filterForm"  action="/filter_products" method="POST">
    <h4>MATERIAL</h4>
    <article>
      <% materials.forEach((material, index) => { %>

        <div id="checklist">
          <input  value="<%= material %>" name="material" type="checkbox" id="<%=index%>-<%=material%>">
          <label for="<%=index%>-<%=material%>"><%= material %></label>
        </div>

      <% }); %>
    </article>

  

    <h4>NAKIT</h4>

    <article>

      <% categories.forEach((category, index) => { %>

          <div id="checklist">
            <input  value="<%= category %>" name="category" type="checkbox" id="<%=index%>-<%=category%>">
            <label for="<%=index%>-<%=category%>"><%= category %></label>
          </div>
       
      <% }); %>
    </article>
    
    <!-- <button type="button" onclick="resetFilters()">Reset</button> -->
  </form>
</aside>

  <section class="products_section reveal" >

  <ul id="productsContainer" class="reveal_img">
    <% if (products.length > 0) { %>
      <% if (products !== '') { %>
        <% products.forEach(product => { %>
          <li id="product"  data-animate class="reveal_img_item product" >
            <a href="/product/<%=product.name.trim().replace(/\s+/g, '-').toLowerCase()%>-<%=product._id%>" class="reveal_img_inner">
              <div class="img reveal_img_bl ">
                  <img class="reveal_img_img" src="<%= product.images[0] %>" alt="<%= product.name %>">
              </div>

              <div class="details">
                <span>
                  <h3><%= product.name %></h3>
                  <strong>
                    € <%= (product.price - (product.price * (product.discount.active ? product.discount.percentage / 100 : 0))).toFixed(2) %>
                    <% if (product.discount.active) {%>
                      <span style="text-decoration: line-through;">€ <%= product.price %></span>
                      <% } %>
                  </strong>
                
                </span>
                <% if (product.material) { %>
                  <span class="category"><%= product.material %></span>
                <% } else { %>
                  <span></span>
                <% } %>
                </div>
            </a>
          </li>
        <% }); %>

      <% } %>
    <% } else { %>
      <p>Proizvodi nisu pronađeni.</p>
    <% } %>
  
        
    
  </ul>

</section>
<script defer>






 
let limit = 6; 

let scrollIncrement = window.innerHeight / 2; 
let currentScroll = 0; // Current scroll position

// Function to handle scroll event
function handleScroll() {
  // Calculate new scroll position
  const newScroll = window.scrollY + window.innerHeight;
  
  // Check if new scroll position is greater than or equal to the current scroll position plus the increment
  if (newScroll >= currentScroll + scrollIncrement) {
    // Increment current scroll position
    currentScroll += scrollIncrement;
    
    loadMoreProducts(limit); // Load more products
  }
}

// Add scroll event listener
window.addEventListener("scroll",handleScroll);


const loadMoreProducts = (limit) => {

  const xhr = new XMLHttpRequest();
  const skip = document.querySelectorAll('.reveal_img_item').length;

  const selectedMaterial = getSelectedFilters('material') ? 'material=' + getSelectedFilters('material') + "&" : "";
  const selectedCategory = getSelectedFilters('category') ? 'category=' + getSelectedFilters('category') : "";
  const url = `/load_more?${selectedMaterial}${selectedCategory}`;

  xhr.open('POST', url);
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.onload = function () {
    if (xhr.status === 200) {
      const response = JSON.parse(xhr.responseText);
      // Append new products to the DOM
      appendProducts(response.products);
      // Increase the limit for the next scroll
      limit += 6; 
      isLoading = false;
    }
  };
  xhr.send(JSON.stringify({ skip, limit }));
}

const appendProducts = (newProducts, emptyContainer) => {
  const productsContainer = document.getElementById('productsContainer');

  if (emptyContainer)   productsContainer.innerHTML = '';

  newProducts.forEach(product => {
    const li = document.createElement('li');
    li.classList.add('reveal_img_item'); 
   
    li.id = `product_${product._id}`;
    li.innerHTML = `
      <a href="/product/${product.name.trim().replace(/\s+/g, '-').toLowerCase()}-${product._id}" class="reveal_img_inner">
        <div class="img reveal_img_bl">
          <img class="reveal_img_img" src="${product.images[0]}" alt="${product.name}">
        </div>
        <div class="details">
          <span>
            <h3>${product.name}</h3>
            <strong>${product.price} €</strong>
          </span>
          ${product.material ? `<span class="category">${product.material}</span>` : '<span></span>'}
        </div>
      </a>
    `;
    productsContainer.appendChild(li);

    observer.observe(li); // Observe each newly added product
  });
}





const resetFilters = () => {
  document.getElementById('filterForm').reset();
  filterProducts();
}


const getSelectedFilters = (name) => {
  const checkboxes = document.querySelectorAll(`[name="${name}"]:checked`);
  return Array.from(checkboxes).map(checkbox => checkbox.value).join(',');
}

const filterProducts = () => {
  const selectedMaterial = getSelectedFilters('material');
  const selectedCategory = getSelectedFilters('category');

  SmoothScroll.scrollToTop
  // Send XHR request to server with selected filters
  const xhr = new XMLHttpRequest();
  xhr.open('POST', '/filter_products');
  xhr.onload = function () {
    if (xhr.status === 200) {
      const response = JSON.parse(xhr.responseText);
      // Update product list with filtered products
      appendProducts(response.products, true);
    }
  };
  const formData = new FormData(document.getElementById('filterForm'));
  xhr.send(formData);
}

// Attach change event listener to each checkbox input
document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
  checkbox.addEventListener('change', filterProducts);
});

</script>